<!DOCTYPE html>
<meta charset="utf-8">
  <head>
    <title>Facebook Posts</title> 
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/bootstrap-theme.min.css" rel="stylesheet">
  <link href="/css/introHCI.css" rel="stylesheet">
  <script type="text/javascript" src="d3.js" charset="utf-8"></script>
  <script src='http://d3js.org/d3.v2.js'></script>
  </head>

<style>

.background {
  fill: none;
  pointer-events: all;
}

#states {
  fill: #aaa;
}

#states .active {
  fill: orange;
}

#state-borders {
  fill: none;
  stroke: #fff;
  stroke-width: 1.5px;
  stroke-linejoin: round;
  stroke-linecap: round;
  pointer-events: none;
}

</style>

<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>

<body>
    <div class="container">
    <!-- h1 through h6 are headers. The higher the number, the smaller the header -->
    <!-- p means paragraph -->
    <div class="jumbotron">


<h1>Foxy Social App</h1>
      <p>Welcome Back!</p>
      <button id="colorBtn" href="http://www.youtube.com/watch?v=tdBNI5Jej-M" class="btn btn-primary btn-lg">Click Here for Smooth Lovin'</button>
    </div>
    <div class="panel panel-default">
      {{#each data}}
      <div class="panel-heading">
        <h3 class="panel-title">{{from.name}}</h3>
      </div>
      <div class="panel-body">
        {{message}}
      </div>
      {{/each}}
    </div>

<script>

var width = 960,
    height = 500,
    centered;

var projection = d3.geo.albersUsa()
    .scale(1070)
    .translate([width / 2, height / 2]);

var path = d3.geo.path()
    .projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", clicked);

var g = svg.append("g");

d3.json("/images/usMap.json", function(error, us) {
  g.append("g")
      .attr("id", "states")
    .selectAll("path")
      .data(topojson.feature(us, us.objects.states).features)
    .enter().append("path")
      .attr("d", path)
      .on("click", clicked);

  g.append("path")
      .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
      .attr("id", "state-borders")
      .attr("d", path);
});

function clicked(d) {
  var x, y, k;

  if (d && centered !== d) {
    var centroid = path.centroid(d);
    x = centroid[0];
    y = centroid[1];
    k = 4;
    centered = d;
  } else {
    x = width / 2;
    y = height / 2;
    k = 1;
    centered = null;
  }

  g.selectAll("path")
      .classed("active", centered && function(d) { return d === centered; });

  g.transition()
      .duration(750)
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
      .style("stroke-width", 1.5 / k + "px");
}

</script>
</body>